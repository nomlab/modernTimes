<h1>入力インタフェース</h1>

<p>
  <button onclick="showAUKCode()">コードを確認</button>
  <button onclick="runAUKCode()">実行</button>
</p>

<div id="blocklyDiv" style="height: 960px; width: 1200px;"></div>
<xml id="toolbox" style="display: none">
  <category name="セットアップ" colour="120">
    <block type="schedule"></block>
    <block type="nurse_name"></block>
    <block type="nurse_infomation"></block>
    <block type="nurse_desire"></block>
    <block type="nurse_desire_entry"></block>
  </category>
  <category name="制約" colour="150">
    <block type="constraint"></block>
  </category>
  <category name="条件" colour="300">
    <block type="nurse_equal"></block>
    <block type="timeslot_and"></block>
    <block type="any"></block>
    <block type="all_day"></block>
    <block type="week"></block>
    <block type="operater"></block>
  </category>
  <category name="表操作" colour="90">
    <block type="replace"></block>
    <block type="change"></block>
    <block type="nurse"></block>
    <block type="date"></block>
    <block type="shift"></block>
  </category>
</xml>

<script>
var workspace = Blockly.inject("blocklyDiv", {
  toolbox: document.getElementById("toolbox"),
  grid: {
    spacing: 20,
    length: 3,
    color: '#ccc',
    snap: true
  },
  trashcan: true,
  zoom: {
    controls: true,
    wheel: true,
    startScale: 1.0,
    maxScale: 3,
    minScale: 0.3,
    scaleSpeed: 1.2,
  },
});

/*
直す必要があるところ
セットアップの勤務形態登録
*/

/*
できれば実装したいリスト
平日，休日，曜日
<=，>=
*/

/* セットアップ */
Blockly.Blocks["schedule"] = {
  init: function() {
    this.appendDummyInput("year")
      .appendField(new Blockly.FieldNumber(2024, 2020, Infinity, 1), "year")
      .appendField("年");
    this.appendDummyInput("month")
      .appendField(new Blockly.FieldDropdown([
        ["1月","01"], ["2月","02"], ["3月","03"], ["4月","04"], ["5月","05"], ["6月","06"],
        ["7月","07"], ["8月","08"], ["9月","09"], ["10月","10"], ["11月","11"], ["12月","12"]
      ]), "month");
    this.appendDummyInput()
      .appendField("の勤務表作成");
    this.setInputsInline(true);
    this.setNextStatement(true, ["nurse_name","constraint"]);
    this.setColour(120);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getYearValue: function() {
    return this.getFieldValue("year");
  },

  getMonthValue: function() {
    return this.getFieldValue("month");
  }
};

Blockly.Blocks["nurse_name"] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("山田 花子"), "name");
    this.appendDummyInput()
      .appendField("さんの登録");
    this.appendStatementInput("nurse_content")
      .setCheck(["nurse_infomation", "nurse_desire"]);
    this.setInputsInline(true);
    this.setPreviousStatement(true, ["schedule", "nurse_name"]);
    this.setNextStatement(true, ["nurse_name", "constraint"]);
    this.setColour(120);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getNameValue: function() {
    return this.getFieldValue("name");
  }
};

Blockly.Blocks["nurse_infomation"] = {
  init: function() {
    this.appendDummyInput()
      .appendField(new Blockly.FieldDropdown([
        ["チーム", "team"], ["ラダーレベル", "ladder"], ["グループ", "group"]
      ]), "group")
      .appendField("は");
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("1"), "infomation");
    this.setInputsInline(true);
    this.setPreviousStatement(true, ["nurse_infomation", "nurse_desire"]);
    this.setNextStatement(true, ["nurse_infomation", "nurse_desire"]);
    this.setColour(120);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getGroupValue: function() {
    return this.getFieldValue("group");
  },

  getInfomationValue: function() {
    return this.getFieldValue("infomation");
  }
};

Blockly.Blocks["nurse_desire"] = {
  init: function() {
    this.appendDummyInput()
      .appendField("勤務希望を追加");
    this.appendStatementInput("ENTRIES")
      .setCheck("nurse_desire_entry");
    this.setPreviousStatement(true, ["nurse_infomation", "nurse_desire"]);
    this.setNextStatement(true, ["nurse_infomation", "nurse_desire"]);
    this.setColour(120);
    this.setTooltip("");
    this.setHelpUrl("");
  }
};

Blockly.Blocks["nurse_desire_entry"] = {
  init: function() {
    this.appendDummyInput()
      .appendField(new Blockly.FieldNumber(2024, 2020, Infinity, 1), "year")
      .appendField("年")
      .appendField(new Blockly.FieldDropdown([
        ["1月", "01"], ["2月", "02"], ["3月", "03"], ["4月", "04"], ["5月", "05"], ["6月", "06"],
        ["7月", "07"], ["8月", "08"], ["9月", "09"], ["10月", "10"], ["11月", "11"], ["12月", "12"]
      ]), "month")
      .appendField(new Blockly.FieldDropdown([
        ["1日", "1"], ["2日", "2"], ["3日", "3"], ["4日", "4"], ["5日", "5"], ["6日", "6"], ["7日", "7"], ["8日", "8"], ["9日", "9"], ["10日", "10"],
        ["11日", "11"], ["12日", "12"], ["13日", "13"], ["14日", "14"], ["15日", "15"], ["16日", "16"], ["17日", "17"], ["18日", "18"], ["19日", "19"], ["20日", "20"],
        ["21日", "21"], ["22日", "22"], ["23日", "23"], ["24日", "24"], ["25日", "25"], ["26日", "26"], ["27日", "27"], ["28日", "28"], ["29日", "29"], ["30日", "30"],
        ["31日", "31"]
      ]), "date")
      .appendField("に")
      .appendField(new Blockly.FieldDropdown([
        ["日勤", "day"], ["準夜勤", "sem"], ["深夜勤", "ngt"], ["休み", "off"]
      ]), "shift_type")
      .appendField("で勤務希望");
    this.setPreviousStatement(true, "nurse_desire_entry");
    this.setNextStatement(true, "nurse_desire_entry");
    this.setColour(120);
    this.setTooltip("");
    this.setHelpUrl("");
  }
};

/* 制約 */
Blockly.Blocks["constraint"] = {
  init: function() {
    this.appendValueInput("nurse")
      .setCheck(["nurse_group","nurse_equal","any"]);
    this.appendDummyInput()
      .appendField("の看護師が");
    this.appendValueInput("shift")
      .setCheck(["shift","shift_type","date","timeslot_and","any","all_day","week"])
    this.appendDummyInput()
      .appendField("の勤務時間に");
    this.appendDummyInput()
      .appendField(new Blockly.FieldDropdown([["最大","at_most"], ["少なくとも","at_least"], ["ちょうど","exactly"]]), "constraint")
      .appendField(new Blockly.FieldNumber(10, 1, Infinity, 1), "number")
    this.appendDummyInput()
      .appendField("人割り当てられる");
    this.setInputsInline(true);
    this.setPreviousStatement(true, ["schedule","nurse_name","constraint"]);
    this.setNextStatement(true, "constraint");
    this.setColour(180);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getNurseValue: function() {
    return this.getFieldValue("nurse");
  },

  getShiftValue: function() {
    return this.getFieldValue("shift");
  },

  getConstraintValue: function() {
    return this.getFieldValue("constraint");
  },

  getNumberValue: function() {
    return this.getFieldValue("number");
  }
};

/* 看護師と時間枠はあとから入れるバージョン
Blockly.Blocks["constraint"] = {
  init: function() {
    this.appendValueInput("value")
      .setCheck(["nurse", "shift"])
    this.appendDummyInput()
      .appendField("に");
    this.appendDummyInput()
      .appendField(new Blockly.FieldDropdown([["最大","at_most"], ["少なくとも","at_least"], ["ちょうど","exactly"]]), "item")
      .appendField(new Blockly.FieldNumber(10, 1, Infinity, 1), "constraint")
    this.appendDummyInput()
      .appendField("人割当てる");
    this.setInputsInline(true);
    this.setOutput(true);
    this.setColour(180);
    this.setTooltip("");
    this.setHelpUrl("");
  },
};*/

/* 条件 */
Blockly.Blocks["nurse_equal"] = {
  init: function() {
    this.appendDummyInput("nurse_group")
        .appendField(new Blockly.FieldDropdown([
        ["チーム","team"], ["ラダーレベル","ladder"], ["グループ","group"]]), "nurse_group")
        .appendField("が")
        .appendField(new Blockly.FieldTextInput("1"),"text");
    this.setInputsInline(false);
    this.setOutput(true, "nurse_equal");
    this.setColour(60);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getGroupValue: function() {
    return this.getFieldValue("nurse_group");
  },

  getTextValue: function() {
    return this.getFieldValue("text");
  }
};

Blockly.Blocks["timeslot_and"] = {
  init: function() {
    this.appendDummyInput()
      .appendField(new Blockly.FieldNumber(2024, 2020, Infinity, 1), "year")
      .appendField("年")
      .appendField(new Blockly.FieldDropdown([
        ["1月", "01"], ["2月", "02"], ["3月", "03"], ["4月", "04"], ["5月", "05"], ["6月", "06"],
        ["7月", "07"], ["8月", "08"], ["9月", "09"], ["10月", "10"], ["11月", "11"], ["12月", "12"]
      ]), "month")
      .appendField(new Blockly.FieldDropdown([
        ["1日", "1"], ["2日", "2"], ["3日", "3"], ["4日", "4"], ["5日", "5"], ["6日", "6"], ["7日", "7"], ["8日", "8"], ["9日", "9"], ["10日", "10"],
        ["11日", "11"], ["12日", "12"], ["13日", "13"], ["14日", "14"], ["15日", "15"], ["16日", "16"], ["17日", "17"], ["18日", "18"], ["19日", "19"], ["20日", "20"],
        ["21日", "21"], ["22日", "22"], ["23日", "23"], ["24日", "24"], ["25日", "25"], ["26日", "26"], ["27日", "27"], ["28日", "28"], ["29日", "29"], ["30日", "30"],
        ["31日", "31"]
      ]), "day")
      .appendField("の")
      .appendField(new Blockly.FieldDropdown([
        ["日勤", "day"], ["準夜勤", "sem"], ["深夜勤", "ngt"]
      ]), "shift_type");
    this.setInputsInline(false);
    this.setOutput(true, "timeslot_and");
    this.setColour(60);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getYearValue: function() {
    return this.getFieldValue("year");
  },

  getMonthValue: function() {
    return this.getFieldValue("month");
  },

  getDayValue: function() {
    return this.getFieldValue("day");
  },

  getShiftValue: function() {
    return this.getFieldValue("shift_type");
  }
};

Blockly.Blocks["all_day"] = {
  init: function() {
    this.appendDummyInput("all_day")
      .appendField(new Blockly.FieldNumber(2024, 2020, Infinity, 1), "year")
      .appendField("年")
      .appendField(new Blockly.FieldDropdown([
        ["1月", "01"], ["2月", "02"], ["3月", "03"], ["4月", "04"], ["5月", "05"], ["6月", "06"],
        ["7月", "07"], ["8月", "08"], ["9月", "09"], ["10月", "10"], ["11月", "11"], ["12月", "12"]
      ]), "month")
      .appendField("の全ての日の")
      .appendField(new Blockly.FieldDropdown([
        ["日勤", "day"], ["準夜勤", "sem"], ["深夜勤", "ngt"]
      ]), "shift_type");
    this.setInputsInline(false);
    this.setOutput(true, "all_day");
    this.setColour(60);
    this.setTooltip("");
    this.setHelpUrl("");
  },

    getYearValue: function() {
    return this.getFieldValue("year");
  },

  getMonthValue: function() {
    return this.getFieldValue("month");
  },

  getShiftValue: function() {
    return this.getFieldValue("shift_type");
  }
};

Blockly.Blocks["week"] = {
  init: function() {
    this.appendDummyInput()
      .appendField(new Blockly.FieldNumber(2024, 2020, Infinity, 1), "year")
      .appendField("年")
      .appendField(new Blockly.FieldDropdown([
        ["1月", "01"], ["2月", "02"], ["3月", "03"], ["4月", "04"], ["5月", "05"], ["6月", "06"],
        ["7月", "07"], ["8月", "08"], ["9月", "09"], ["10月", "10"], ["11月", "11"], ["12月", "12"]
      ]), "month")
      .appendField("の")
      .appendField(new Blockly.FieldDropdown([
        ["1週目", "1"], ["2週目", "2"], ["3週目", "3"], ["4週目", "4"], ["5週目", "5"]
      ]), "week_num")
      .appendField("の日の")
      .appendField(new Blockly.FieldDropdown([
        ["日勤", "day"], ["準夜勤", "sem"], ["深夜勤", "ngt"]
      ]), "shift_type");
    this.setInputsInline(false);
    this.setOutput(true, "week");
    this.setColour(60);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getYearValue: function() {
    return this.getFieldValue("year");
  },

  getMonthValue: function() {
    return this.getFieldValue("month");
  },

  getWeekNumValue: function() {
    return this.getFieldValue("week_num");
  },

  getShiftValue: function() {
    return this.getFieldValue("shift_type");
  }
};

Blockly.Blocks["any"] = {
  init: function() {
    this.appendDummyInput("any")
        .appendField("任意");
    this.setInputsInline(false);
    this.setOutput(true, "any");
    this.setColour(60);
    this.setTooltip("");
    this.setHelpUrl("");
  },
};

Blockly.Blocks["operater"] = {
  init: function() {
    this.appendValueInput("operater")
      .setCheck(["nurse_group","shift_type","text","date"])
      .appendField(new Blockly.FieldDropdown([
        ["または","+"], ["かつ","*"]]), "operater");
    this.setInputsInline(false);
    this.setOutput(true, "operater");
    this.setColour(60);
    this.setTooltip("");
    this.setHelpUrl("");
  }
};

Blockly.Blocks["test"] = {
    init: function() {
        this.appendValueInput("value")
            .setCheck(null);
        this.setInputsInline(true);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setColour(210);
        this.setTooltip("");
        this.setHelpUrl("");
        this.setOnChange(function(event) {
            if (event.type === Blockly.Events.BLOCK_MOVE) {
                // ブロックが移動されたときのみ処理する
                var inputBlock = this.getInputTargetBlock("value");
                if (inputBlock && inputBlock.type !== "connector") {
                    this.addConnectorBlock(inputBlock);
                }
            }
        });
    },

    addConnectorBlock: function(inputBlock) {
        // connector ブロックを作成
        var connectorBlock = this.workspace.newBlock("connector");
        // connector ブロックを間に接続
        connectorBlock.inputList[0].connection.connect(inputBlock.outputConnection);
        this.getInput("value").connection.connect(connectorBlock.outputConnection);
        // 表示がバグるのでワークスペースをリロード
        var xml = Blockly.Xml.workspaceToDom(this.workspace);
        Blockly.Xml.clearWorkspaceAndLoadFromXml(xml, this.workspace);
    }
};

Blockly.Blocks["connector"] = {
  init: function() {
    this.appendValueInput("value1")
      .setCheck(null);
    this.appendValueInput("value2")
      .setCheck(null);
    this.setInputsInline(false);
    this.setOutput(true, "connector");
    this.setColour(180);
    this.setTooltip("");
    this.setHelpUrl("");
    this.setOnChange(function(event) {
      if (event.type === Blockly.Events.BLOCK_MOVE) {
        // ブロックが移動されたときのみ処理する
        var inputBlocks = this.getChildren();
        var inputNum = this.inputList.length;
        if (inputBlocks.length == inputNum) this.addConnector(inputNum + 1);
        if (inputBlocks.length < inputNum - 1) this.reduceConnector(inputBlocks, inputNum);
      }
    });
  },
  addConnector: function(inputNum) {
    this.appendValueInput("value" + inputNum)
      .setCheck(null);
  },
  reduceConnector: function(inputBlocks, inputNum) {
    // 入力ブロックの再接続
    inputBlocks.forEach((block, i) => {
      this.inputList[i].connection.connect(block.outputConnection);
    });
    this.removeInput("value" + inputNum, true);
  }
};

/*
Blockly.Blocks["operater"] = {
  init: function() {organiza
    this.appendValueInput("operater")
      .setCheck(["nurse_group","shift_type","text","date"])
      .appendField(new Blockly.FieldDropdown([
        ["と","+"], ["の","*"], ["が","="]]), "operater");
    this.setInputsInline(false);
    this.setOutput(true, "operater");
    this.setColour(60);
    this.setTooltip("");
    this.setHelpUrl("");
  }
};
*/

/* 表操作 */
Blockly.Blocks["replace"] = {
  init: function() {
    this.appendValueInput("nurse1")
      .setCheck("nurse");
    this.appendDummyInput()
      .appendField("さんと");
    this.appendValueInput("nurse2")
      .setCheck("nurse")
    this.appendDummyInput()
      .appendField("さんの勤務を入れ替える");
    this.setInputsInline(true);
    this.setPreviousStatement(true, ["replace", "change"]);
    this.setNextStatement(true, "constraint");
    this.setColour(180);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getNurseValue: function() {
    return this.getFieldValue("nurse1");
  },

  getShiftValue: function() {
    return this.getFieldValue("nurse2");
  }
};

Blockly.Blocks["change"] = {
  init: function() {
    this.appendValueInput("nurse")
      .setCheck("nurse");
    this.appendDummyInput()
      .appendField("さんの");
    this.appendValueInput("date")
      .setCheck("date")
    this.appendDummyInput()
      .appendField("の勤務を");
    this.appendValueInput("shift")
      .setCheck("shift")
    this.appendDummyInput()
      .appendField("に変更する");
    this.setInputsInline(true);
    this.setPreviousStatement(true, ["replace", "change"]);
    this.setNextStatement(true, "constraint");
    this.setColour(180);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getNurseValue: function() {
    return this.getFieldValue("nurse");
  },

  getNurseValue: function() {
    return this.getFieldValue("date");
  },

  getShiftValue: function() {
    return this.getFieldValue("shift");
  }
};

Blockly.Blocks["date"] = {
  init: function() {
    this.appendDummyInput("year")
      .appendField(new Blockly.FieldNumber(2024, 2020, Infinity, 1), "year")
      .appendField("年");
    this.appendDummyInput("month")
      .appendField(new Blockly.FieldDropdown([
        ["1月","01"], ["2月","02"], ["3月","03"], ["4月","04"], ["5月","05"], ["6月","06"],
        ["7月","07"], ["8月","08"], ["9月","09"], ["10月","10"], ["11月","11"], ["12月","12"]
      ]), "month");
    this.appendDummyInput()
        .appendField(new Blockly.FieldDropdown([
        ["1日","1"], ["2日","2"], ["3日","3"], ["4日","4"], ["5日","5"], ["6日","6"], ["7日","7"], ["8日","8"], ["9日","9"], ["10日","10"],
        ["11日","11"], ["12日","12"], ["13日","13"], ["14日","14"], ["15日","15"], ["16日","16"], ["17日","17"], ["18日","18"], ["19日","19"], ["20日","20"],
        ["21日","21"], ["22日","22"], ["23日","23"], ["24日","24"], ["25日","25"], ["26日","26"], ["27日","27"], ["28日","28"], ["29日","29"], ["30日","30"],
        ["31日","31"]
      ]), "date")
    this.setInputsInline(false);
    this.setOutput(true);
    this.setColour(60);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getYearValue: function() {
    return this.getFieldValue("year");
  },

  getMonthValue: function() {
    return this.getFieldValue("month");
  },

  getDateValue: function() {
    return this.getFieldValue("date");
  }
};

Blockly.Blocks["nurse"] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("山田 花子"),"name");
    this.setInputsInline(true);
    this.setColour(180);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getNameValue: function() {
    return this.getFieldValue("name");
  }
};

Blockly.Blocks["shift"] = {
  init: function() {
    this.appendField(new Blockly.FieldDropdown([
        ["日勤","day"], ["準夜勤","sem"], ["深夜勤","ngt"], ["休み","off"]
      ]), "shift_type");
    this.setInputsInline(false);
    this.setOutput(true);
    this.setColour(60);
    this.setTooltip("");
    this.setHelpUrl("");
  },

  getShiftValue: function() {
    return this.getFieldValue("shift_type");
  }
};

/* AUK */
/* セットアップ */
Blockly.Python["schedule"] = function(block) {
  var year = block.getFieldValue("year");
  var month = block.getFieldValue("month");
  year = parseInt(year, 10);
  month = parseInt(month, 10);

  var daysInMonth = new Date(year, month, 0).getDate();
  var dateString = '"';
  for (var day = 1; day <= daysInMonth; day++) {
    formattedDate = year + (month < 10 ? '0' : '') + month + (day < 10 ? '0' : '') + day;
    dateString += formattedDate;
    if (day < daysInMonth) {
      dateString += '", "';
    }
  }
  dateString += '"';

  var shiftTypes = ["day", "sem", "ngt"];
  var shifts = '"' + shiftTypes.join('", "') + '"';

  var code = "timeslot do\n  days " + dateString + "\n  periods " + shifts + "\nend\n";
  return code;
};

Blockly.Python["nurse_name"] = function(block) {
  var name = block.getFieldValue("name");
  var content = Blockly.Python.statementToCode(block, "nurse_content");
  var code = "nurse " + '"' + name + '"' + " do\n" + content + "\nend\n";
  return code;
};

Blockly.Python["nurse_infomation"] = function(block) {
  var group = block.getFieldValue("group");
  var infomation = block.getFieldValue("infomation");
  var code = "  " + group + " " + '"' + infomation + '"' + "\n";
  return code;
};

Blockly.Python["nurse_desire"] = function(block) {
  var entries = Blockly.Python.statementToCode(block, "ENTRIES");
  entries = entries.trim();  // 末尾のスペースを削除
  var code = "  timeslots " + entries.split(" ").join(", ") + " ";
  return code;
};

Blockly.Python["nurse_desire_entry"] = function(block) {
  var year = block.getFieldValue("year");
  var month = block.getFieldValue("month");
  var date = block.getFieldValue("date");
  var shiftType = block.getFieldValue("shift_type");
  var daysInMonth = new Date(year, month, 0).getDate();

  if (date < 1 || date > daysInMonth) {
    return "";
  }

  year = parseInt(year, 10);
  month = parseInt(month, 10);
  date = parseInt(date, 10);

  var daysInMonth = new Date(year, month, 0).getDate();
  var formattedDate = year + (month < 10 ? '0' : '') + month + (date < 10 ? '0' : '') + date;

  var code = '"' + formattedDate + shiftType + '" ';
  return code;
};

/* 制約 */
Blockly.Python["constraint"] = function(block) {
  var nurse = Blockly.Python.statementToCode(block, "nurse");
  var shift = Blockly.Python.statementToCode(block, "shift");
  var constraint = block.getFieldValue("constraint");
  var number = block.getFieldValue("number");
  var code = constraint + " " + number + " do\n  timeslot {" + shift + "} & nurse {" + nurse + "}\nend\n";
  return code;
};

/* 条件 */
Blockly.Python["nurse_equal"] = function(block) {
  var group = block.getFieldValue("nurse_group");
  var text = block.getFieldValue("text");
  var code = group + " == " + text;
  return code;
};

Blockly.Python["timeslot_and"] = function(block) {
  var year = block.getFieldValue("year");
  var month = block.getFieldValue("month");
  var day = block.getFieldValue("day");
  var shift_type = block.getFieldValue("shift_type");

  year = parseInt(year, 10);
  month = parseInt(month, 10);
  day = parseInt(day, 10);

  var daysInMonth = new Date(year, month, 0).getDate();

  // 無効な日付を無視
  if (day < 1 || day > daysInMonth) {
    day = ''; // 無効な日付は空文字に設定
  }

  var formattedDate = year + (month < 10 ? '0' : '') + month + (day < 10 ? '0' : '') + day;
  var code = formattedDate + " * " + shift_type;
  return [code, Blockly.Python.ORDER_NONE];
};

Blockly.Python["all_day"] = function(block) {
  var code = "all";
  return code;
};

Blockly.Python["week"] = function(block) {
  var code = "all";
  return code;
};

Blockly.Python["any"] = function(block) {
  var code = "any";
  return code;
};
</script>
